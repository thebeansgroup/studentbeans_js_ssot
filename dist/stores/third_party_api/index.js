// Generated by CoffeeScript 1.10.0
(function() {
  var AppDispatcher, Assign, CHANGE_EVENT, Constants, EventEmitter, ExternalScriptStore, Globals, _isScriptReady, _loadScript, _scripts, _setLoadState, _timeouts, fbEnsureInit;

  AppDispatcher = require('../../dispatcher/');

  EventEmitter = require('events').EventEmitter;

  Assign = require('object-assign');

  Constants = require('../../constants/');

  CHANGE_EVENT = 'change';

  Globals = window.Scripts = {};

  _scripts = {
    'google_maps': {
      loaded: false,
      src: '//maps.googleapis.com/maps/api/js?v=3.exp&callback=Scripts.initializeGoogleMaps',
      callback: true
    },
    'gapi_client_plus': {
      loaded: false,
      src: '//apis.google.com/js/client:plus.js',
      callback: false
    },
    'facebook-jssdk': {
      loaded: false,
      src: '//connect.facebook.net/en_GB/all.js',
      callback: false
    }
  };

  _timeouts = [];

  Globals.initializeGoogleMaps = function() {
    Globals.initializeGoogleMaps = null;
    return _setLoadState('google_maps', true);
  };

  fbEnsureInit = function(callback) {
    if (!window.fbAPIInit) {
      return _timeouts['fb_init'] = setTimeout((function(_this) {
        return function() {
          return fbEnsureInit(callback);
        };
      })(this), 50);
    } else {
      clearTimeout(_timeouts['fb_init']);
      if (callback) {
        return callback();
      }
    }
  };

  _setLoadState = function(type, value) {
    _scripts[type].loaded = value;
    return ExternalScriptStore.emitChange();
  };

  _loadScript = function(type, callback) {
    var script;
    if (!_scripts[type].loaded) {
      script = document.createElement('script');
      script.async = 'async';
      script.src = _scripts[type].src;
      document.getElementsByTagName('head')[0].appendChild(script);
      return script.onload = function() {
        if (_scripts[type].callback) {
          return;
        }
        return _isScriptReady(type);
      };
    }
  };

  _isScriptReady = function(type) {
    switch (type) {
      case 'gapi_client_plus':
        return gapi.load('auth', (function(_this) {
          return function() {
            return _setLoadState(type, true);
          };
        })(this));
      case 'facebook-jssdk':
        return fbEnsureInit((function(_this) {
          return function() {
            return _setLoadState(type, true);
          };
        })(this));
    }
  };

  ExternalScriptStore = Assign({}, EventEmitter.prototype, {
    getAll: function() {
      return _scripts;
    },
    hasScriptLoaded: function(type) {
      return _scripts[type].loaded;
    },
    emitChange: function() {
      return this.emit(CHANGE_EVENT);
    },
    addChangeListener: function(callback) {
      return this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function(callback) {
      return this.removeListener(CHANGE_EVENT, callback);
    },
    dispatcherIndex: AppDispatcher.register(function(payload) {
      var action;
      action = payload.action;
      switch (action.actionType) {
        case Constants.LOAD_SCRIPT:
          _loadScript(action.data.name, action.data.callback);
          break;
      }
      return true;
    })
  });

  module.exports = ExternalScriptStore;

}).call(this);
